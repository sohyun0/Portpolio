@charset "utf-8";
@import "_variables";

/// @param {Number} $isValue - 10 , 12  ...
/// @param {String} $isUnit - px, rem  ...
/// @return {Number | String}  - 10px
@function insertUnit($isValue, $isUnit: px) {
  // @debug $isValue;
  @if (unitless($isValue)) {
    @if $isValue == 0 {
      $isValue: $isValue;
    } @else {
      $isValue: $isValue + $isUnit;
    }
  }
  @return $isValue;
}
/// @param {Number} $ixPx - Design px
/// @param {Number} $isBase - Standard px
/// @return {Number | rem}  - 1rem
@function convertPxToRem($isPx, $isBase: 16) {
  @if $isPx == 0 {
    @return $isPx;
  }
  @return calc($isPx / $isBase) * 1rem;
}
/// @param {Number} $isPx - design px
/// @param {Number} $isBase - breakpoints
/// @return {Number | PX}  - **vw or **vh
@function convertPxToVw($isPx, $isBase) {
  @if $isPx == 0 {
    @return $isPx;
  }
  @return calc($isPx * 100 / $isBase) * 1vw;
}
@function convertPxToVh($isPx, $isBase) {
  @if $isPx == 0 {
    @return $isPx;
  }
  @return calc($isPx * 100 / $isBase) * 1vh;
}
@mixin setClearfix {
  &::after {
    content: "";
    display: block;
    clear: both;
  }
}
// 접근성 블라인드 텍스트
@mixin applyBlindText {
  overflow: hidden;
  position: absolute;
  top: 0;
  left: 0;
  width: 1px;
  height: 1px;
  font-size: 0;
  line-height: 0;
  text-indent: -9999em;
  setzindex: -100;
}
/// @param {Number} $isLines - 말줄임표가 필요한 라인
@mixin applyEllipsis($isLines: 1) {
  @if ($isLines==1) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-line-clamp: $isLines;
    -webkit-box-orient: vertical;
  }
}
/// @param {String} $isDirection - radius를 적용시킬 방향
/// @param {Number} $isRadius - radius 수치
@mixin setDualRadius($isDirection, $isRadius: 8) {
  $isRadius: insertUnit($isRadius);
  @if ($isDirection == left) {
    border-radius: $isRadius 0 0 $isRadius;
  } @else if ($isDirection == right) {
    border-radius: 0 $isRadius $isRadius 0;
  } @else if ($isDirection == top) {
    border-radius: $isRadius $isRadius 0 0;
  } @else if ($isDirection == bottom) {
    border-radius: 0 0 $isRadius $isRadius;
  }
}
/// @param {String} $isTrackBgColor -track color
/// @param {String} $isThumbColor -thumb color
/// @param {String} $isTrackBorderColor -thumb color
///
/// @param {Number} $isScrollWidth - 스크롤바 넓이
@mixin setScrollStyle($isTrackBgColor: $white100, $isThumbColor: $gray200, $isScrollWidth: 13, $isTrackBorderColor: white) {
  $isScrollWidth: insertUnit($isScrollWidth);
  overflow: auto;
  scrollbar-width: thin;
  scrollbar-color: $isTrackBgColor $isTrackBgColor;
  &::-webkit-scrollbar {
    width: $isScrollWidth;
    height: 10px;
  }
  &::-webkit-scrollbar-track {
    background-color: $isTrackBgColor;
    border: 0;
    border-top: 1px solid $isTrackBgColor;
  }
  &::-webkit-scrollbar-thumb {
    border: 3px solid $isTrackBorderColor;
    border-radius: 8px;
    background-color: $isThumbColor;
    background-clip: padding-box;
  }
}
/// @param {String} $isFlex -flex , inline-flex
/// @param {String} $isWrap - wrap , nowrap
/// @param {String} $isJustify - justify-content value
@mixin setFlexLayout($isFlex: flex, $isWrap: wrap, $isJustify: space-between) {
  display: $isFlex;
  flex-flow: $isWrap row;
  justify-content: $isJustify;
}
//컨텐츠별 z-index 설정
/// @param {Number} $isIndex - z-index
@mixin setZIndex($isIndex) {
  @if ($isIndex ==fixmenu) {
    z-index: 10;
  } @else if($isIndex == sidemenu) {
    z-index: 11;
  } @else if($isIndex == dimmed-step1) {
    z-index: 12;
  } @else if($isIndex == dimmed-step2) {
    z-index: 14;
  } @else if($isIndex == pop-step1) {
    z-index: 13;
  } @else if($isIndex == pop-step2) {
    z-index: 15;
  } @else if($isIndex == alert) {
    z-index: 16;
  } @else if($isIndex == content) {
    z-index: 9;
  }
}
// modal dimmed
/// @param {String} $isBgColor -dimmed background color
@mixin createDim($isBgColor) {
  display: none;
  position: fixed;
  right: 0;
  top: 0;
  width: 100%;
  height: 100vh;
  background-color: $isBgColor;
  @include setZIndex(dimmed-step1);
}
/// @param {Number} $isPrefix - 컨테이너 너비의 기준 min, max
/// @param {Number} $isContainerWidth - 컨테이너 너비 & 두개의 컨테이너 일때 최대 단위의 수치로 사용
/// @param {Number} $isSideMargin - 사이드 여백 너비
/// @param {Boolean} $isMixContainer - min, max 두개의 컨테이너가 필요할 때
/// @param {Boolean} $isSeconContainerWidth -  두개의 컨테이너 일때 최소 단위의 수치로 사용
@mixin setContainerMinMax($isPrefix: max, $isContainerWidth: 1600, $isSideMargin: 20, $isMixContainer: false, $isSeconContainerWidth: 0) {
  $isContainerWidth: insertUnit($isContainerWidth);
  $isSeconContainerWidth: insertUnit($isSeconContainerWidth);
  $isSideMargin: insertUnit($isSideMargin);
  $isPrefix: $isPrefix + "-width";
  @if ($isMixContainer) {
    max-width: $isContainerWidth;
    min-width: $isSeconContainerWidth;
  } @else {
    #{$isPrefix}: $isContainerWidth;
  }
  width: 100%;
  margin: 0 auto;
  box-sizing: border-box;
  padding: 0 $isSideMargin;
}
// 그리드 계산
/// @param {Number} $isColumn - column 갯수
/// @param {Number} $isGridLoopNum - 12grid일때 모든 column을 gutter포함한 column을 만들때 사용
/// @param {Number} $isGutter - column 사이의 여백수치
/// @param {Number} $isMaxWidth - 그리드의 컨테이너
@function gridCalculator($isColumn: 1, $isGridLoopNum: 0, $isGutter: 24, $isMaxWidth: 100%) {
  $isGutter: insertUnit($isGutter);
  $isTotalGutter: calc($isGutter * ($isColumn - 1));
  $isColumnWidth: calc(($isMaxWidth - $isTotalGutter) / $isColumn);
  @if ($isColumn == 1) {
    $isColumnWidth: calc(($isMaxWidth) / $isColumn);
  } @else if ($isColumn == 12 and $isGridLoopNum != 0) {
    $isColumnWidth: calc((($isMaxWidth - $isTotalGutter) / $isColumn * $isGridLoopNum) + $isGutter * ($isGridLoopNum - 1));
  }
  @return $isColumnWidth;
}
// 분할 박스
/// @param {Number} $isDivide - 나눠야 할 갯수
/// @param {Number} $isWidth - 기준이 될 너비
@mixin dividerBox($isDivide: 2, $isWidth: 100%) {
  width: calc($isWidth / $isDivide);
}
// 여백
// 최소 ~ 최대 생성개수
/// @param {Number} $isStartNum - start number
/// @param {Number} $isEndNum - end number
/// @param {Boolean} $isStep - 연속된 숫자or 연속되지 않은 숫자
/// @param {Number} $isStepNum - 해당 숫자의 배수
@function createSpacingNum($isStartNum, $isEndNum, $isStep: true, $isStepNum) {
  $_isSize: ();
  @if (isStep) {
    $_stepEnd: calc($isEndNum/$isStepNum);
    @for $_value from $isStartNum through $_stepEnd {
      // $_value를 start부터 end까지 반복,
      $_isSize: append($_isSize, $_value * $isStepNum);
    }
  } @else {
    @for $_value from $isStartNum through $isEndNum {
      $_isSize: append($_isSize, $_value);
    }
  }
  @return $_isSize;
}
// 여백 컴포넌트 생성
/// @param {Number} $isSpacingName  - _variables.scss의 spacingName
/// @param {Number} $isPositionName   _variables.scss의 position
/// @param {Number} $isSize  createSpacingNum의 size
/// @param {Boolean} $isResponsive - 반응형 여부
/// @param {Number} $isBreakpoint - isResponsive:true일때 vw으로 바꿀 중단점
@mixin createSpacingClassList($isSpacingName, $isPositionName, $isSize, $isResponsive: true, $isBreakpoint: 480) {
  @each $_preKey, $_preValue in $isSpacingName {
    @each $_px in $isSize {
      @if ($_px == 0) {
        .#{$_preKey}#{$_px} {
          @if $isResponsive {
            #{$_preValue}: convertPxToVw($_px, $isBreakpoint) !important;
          } @else {
            #{$_preValue}: insertUnit($_px) !important;
          }
        }
        @each $_sufKey, $_sufValue in $isPositionName {
          .#{$_preKey}#{$_sufKey}#{$_px} {
            @if $isResponsive {
              #{$_preValue}-#{$_sufValue}: convertPxToVw($_px, $isBreakpoint) !important;
            } @else {
              #{$_preValue}-#{$_sufValue}: insertUnit($_px) !important;
            }
          }
        }
      } @else {
        .#{$_preKey}#{$_px} {
          @if $isResponsive {
            #{$_preValue}: convertPxToVw($_px, $isBreakpoint);
          } @else {
            #{$_preValue}: insertUnit($_px);
          }
        }
        @each $_sufKey, $_sufValue in $isPositionName {
          .#{$_preKey}#{$_sufKey}#{$_px} {
            @if $isResponsive {
              #{$_preValue}-#{$_sufValue}: convertPxToVw($_px, $isBreakpoint);
            } @else {
              #{$_preValue}-#{$_sufValue}: insertUnit($_px);
            }
          }
        }
      }
    }
  }
}
/// @param {String} $isPosition  - position의 value
/// @param {String} $isHorizDirection  left , right
/// @param {Number} $isHorizValue   left , right의 수치
/// @param {String} $isVertiDirection  top , bottom
/// @param {Number} $isVertiValue   top , bottom의 수치
/// @param {Number} $isTranslateX   x좌표 수치
/// @param {Number} $isTranslateY   y좌표 수치
@mixin setPosition($isPosition: absolute, $isHorizDirection: left, $isHorizValue: 0, $isVertiDirection: top, $isVertiValue: 0, $isTranslateX: 0, $isTranslateY: 0) {
  position: $isPosition;
  #{$isHorizDirection}: insertUnit($isHorizValue);
  #{$isVertiDirection}: insertUnit($isVertiValue);
  transform: translate($isTranslateX, $isTranslateY);
}
@mixin setPositionCenter($isPosition: absolute, $isHorizValue: 50%, $isVertiValue: 50%, $isTranslateX: -50%, $isTranslateY: -50%) {
  position: $isPosition;
  top: $isHorizValue;
  left: $isVertiValue;
  transform: translate($isTranslateX, $isTranslateY);
}
/// @param {String} $isPath  - 이미지 경로
/// @param {String} $isName  - 이미지 명
/// @param {String} $isFormat  - 이미지 확장자
/// @param {String} $isPostion  - 이미지 위치 지정
/// @param {String} $isSize  - 이미지 사이즈 지정
/// @param {String} $isColor  - 이미지 배경색상 지정
@mixin createBackgroundImage($isPath, $isName, $isFormat: "png", $isPostion: center, $isSize: contain, $isColor: transparent) {
  @if ($isColor!=transparent) {
    background: $isColor url("#{$isPath}#{$isName}.#{$isFormat}") no-repeat $isPostion;
    background-size: $isSize;
  } @else {
    background: url("#{$isPath}#{$isName}.#{$isFormat}") no-repeat $isPostion;
    background-size: $isSize;
  }
}
//아이콘 삽입
/// @param {String} $isName  - 이미지 명
/// @param {String} $isPath  - 이미지 경로
@mixin createSvgImage($isName, $isPath: "../img/icon/") {
  -webkit-mask-image: url("#{$isPath}#{$isName}.svg");
  mask-image: url("#{$isPath}#{$isName}.svg");
}
/// @param {String} $isPosition  - 이미지 위치
/// @param {String} $isSize  - 이미지 크기
/// @param {String} $isRepeat  - 이미지 반복여부
@mixin setSvgImage($isPosition: center, $isSize: contain, $isRepeat: no-repeat) {
  mask-size: $isSize;
  mask-position: $isPosition;
  mask-repeat: $isRepeat;
  -webkit-mask-size: $isSize;
  -webkit-mask-position: $isPosition;
  -webkit-mask-repeat: $isRepeat;
}
//가상선택자 공간
/// @param {String} $isDisplay  - display value
/// @param {String} $isContent  - 컨텐츠 내용
@mixin createPseudoElement($isDisplay: inline-block, $isContent: "") {
  content: $isContent;
  display: $isDisplay;
}
/// @param {List} $isFont  - _variables.scss의 font
/// @param {String} $isColor  - color code
/// @param {Number} $isFontWeight  - 폰트 굵기
@mixin setFontStyle($isFont, $isColor: map-get($gray, 900), $isFontWeight: 500) {
  color: $isColor;
  font-weight: $isFontWeight;
  font-size: #{convertPxToRem(nth($isFont, 1))};
  line-height: nth($isFont, 2);
}
/// @param {Boolean} $isState - 상태별 스타일
@mixin setInputStyle($isState: true) {
  display: inline-block;
  border: 1px solid $gray75;
  border-radius: 8px;
  font-weight: 500;
  color: $gray700;
  resize: none;
  @if (isState) {
    &:focus {
      border-color: $primary500;
      box-shadow: 0px 0px 0px 4px $primary75;
    }
    &::placeholder {
      color: $gray400;
    }
    &:read-only {
      cursor: default;
      pointer-events: none;
      box-shadow: none !important;
      &.no-bd {
        border: none !important;
      }
    }
    &:disabled {
      border-color: $gray75;
      background-color: $gray75;
      color: $gray400;
      cursor: default;
      pointer-events: none;
    }
  }
}
/// @param {Boolean} $isOnlySize - 별도의 사이즈 클래스 유무
/// @param {Boolean} $isState - 상태별 스타일
@mixin setSelectStyle($isOnlySize: true, $isState: true) {
  @include setFontStyle(map-get($font, sm-24));
  $radius: 8px;
  width: 100%;
  position: relative;
  display: block;
  background-color: $white100;
  border-radius: $radius;
  border: 1px solid $gray100;
  min-width: 120px;
  cursor: pointer;
  @if ($isOnlySize) {
    padding: 8px 38px 8px 12px;
  }
  @if (isState) {
    &:hover {
      border-color: $gray200;
    }
    &:focus {
      border-color: $primary500;
    }
    &::placeholder {
      color: $gray300;
    }
    &:read-only:not(:disabled) {
      cursor: default;
    }
  }
  &:focus {
    & .option-list {
      display: block;
    }
    & .selected-item {
      &::after {
        @include createSvgImage(chevron_top_lg);
      }
    }
  }
  &.disabled {
    pointer-events: none;
    border-color: $gray100;
    background-color: $gray50;
    & .selected-item {
      color: $gray500;
      &::after {
        background-color: $gray500;
      }
    }
  }
  & .selected-item {
    @include setFontStyle(map-get($font, sm-24));
    display: block;
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    text-align: left;
    pointer-events: none;
    &::after {
      @include createPseudoElement;
      @include setSvgImage;
      @include createSvgImage(chevron_bottom_lg);
      width: 16px;
      height: 16px;
      position: absolute;
      top: 50%;
      right: 12px;
      transform: translateY(-50%);
      background-color: $gray900;
    }
  }
  & .option-list {
    display: none;
    width: 100%;
    max-height: 252px;
    position: absolute;
    left: 0;
    top: 42px;
    border-radius: $radius;
    border: 1px solid $gray50;
    background-color: $white100;
    box-shadow: 0px 2px 5px -8px rgba(0, 0, 0, 0.02), 0px 8px 16px -2px rgba(0, 0, 0, 0.1);
    border-radius: $radius;
    word-break: keep-all;
    z-index: 1;
  }
  & .option-item {
    @include setFontStyle(map-get($font, sm-24));
    position: relative;
    padding: 8px 12px;
    height: 38px;
    &:hover {
      background-color: $gray50;
    }
    &.active {
      @include setFontStyle(map-get($font, md-24));
    }
    &.disabled,
    &.disabled * {
      color: $gray200;
      pointer-events: none;
      & .ic {
        background-color: $gray200;
      }
    }
    & label {
      position: absolute;
      top: 0;
      left: 0;
      width: calc(100% - 1px);
      height: 100%;
      padding: 8px 12px;
    }
    &.item {
      vertical-align: middle;
    }
  }
}

/// @param {String} $isType - bg , bd , text , mix (bg + bd)
/// @param {String} $isMainThemeColor -background or border color code / mix type일때 main color
/// @param {String} $isFontColor -color code
/// @param {String} $isSubThemeColor -mix type일때 border color
@mixin setButtonStyle($isType, $isMainThemeColor, $isFontColor, $isSubThemeColor: none) {
  @if ($isType == bg) {
    background-color: $isMainThemeColor;
    color: $isFontColor;
  } @else if ($isType == bd) {
    border: 1px solid $isMainThemeColor;
    color: $isFontColor;
  } @else if($isType == text) {
    color: $isFontColor;
  } @else if($isType == mix) {
    background-color: $isMainThemeColor;
    border: 1px solid $isSubThemeColor;
    color: $isFontColor;
  }
}
/// @param {String} $isType - bg , bd , text , mix (bg + bd)
/// @param {String} $isHoverColor -background color code
/// @param {String} $isShadowColor -color code
/// @param {String} $isFontColor - font color
@mixin setButtonStateStyle($isType, $isHoverColor, $isShadowColor, $isFontColor: inherit) {
  @if ($isType == bg) {
    &:hover {
      background-color: $isHoverColor;
      @if not($isFontColor == inherit) {
        color: $isFontColor;
      }
    }
    &:active {
      box-shadow: 0px 0px 0px 4px $isShadowColor;
    }
  } @else if ($isType == bd) {
    &:hover {
      background-color: $isHoverColor;
      @if not($isFontColor == inherit) {
        color: $isFontColor;
      }
    }
    &:active {
      box-shadow: 0px 0px 0px 4px $isShadowColor;
    }
  } @else if($isType == text) {
    &:hover {
      background-color: $isHoverColor;
      @if not($isFontColor == inherit) {
        color: $isFontColor;
      }
    }
    &:active {
      box-shadow: 0px 0px 0px 4px $isShadowColor;
    }
  } @else if($isType == mix) {
    &:hover {
      background-color: $isHoverColor;
      @if not($isFontColor == inherit) {
        color: $isFontColor;
      }
    }
    &:active {
      box-shadow: 0px 0px 0px 4px $isShadowColor;
    }
  }
}
//radio , checkbox  => label 가상 영역 생성
@mixin createLabelPseudoElement {
  & + label {
    display: inline-block;
  }
  &.left + label::before,
  &.right + label::after {
    @include createPseudoElement;
  }
}
/// @param {List} $checkboxIconSize - _variables.scss 의 checkboxIconSize
//radio , checkbox => label 아이콘 사이즈 생성
@mixin createLabelSize {
  @each $isSizeName, $detailSize in $checkboxIconSize {
    &.inp-ic-#{$isSizeName} + label {
      width: $detailSize;
      height: $detailSize;
      margin: 2px;
    }
  }
}

//radio , checkbox => label  가상영역에 아이콘 사이즈 생성
/// @param {List} $checkboxIconSize - _variables.scss 의 checkboxIconSize
@mixin createLabelPseudoSize {
  @each $isSizeName, $detailSize in $checkboxIconSize {
    &.#{$isSizeName} + label::before,
    &.#{$isSizeName} + label::after {
      width: $detailSize;
      height: $detailSize;
      margin: 2px;
    }
  }
}

//radio , checkbox 아이콘 이미지 생성
// @include createLabelPseudoIcon(left, input_icon_circle_off_sm, input_icon_circle_on_sm);
// @include createLabelPseudoIcon(right, input_icon_circle_off_sm, input_icon_circle_on_sm);
/// @param {String} $isDirection - 아이콘 위치
/// @param {String} $isDefault - 기본 상태 (체크 되지 않음)
/// @param {String} $isChecked - 체크 상태
@mixin createLabelPseudoIcon($isDirection: left, $isDefault, $isChecked) {
  @if ($isDirection == left) {
    & + label::before {
      @include background("../img/icon/", $isDefault, "svg");
    }
    &:checked + label::before {
      @include background("../img/icon/", $isChecked, "svg");
    }
  } @else if($isDirection == right) {
    & + label::after {
      @include background("../img/icon/", $isDefault, "svg");
    }
    &::checked + label::after {
      @include background("../img/icon/", $isChecked, "svg");
    }
  }
}

//도형 - 원형
/// @param {String} $isType - stroke , fill, mix
/// @param {String} $isMainThemeColor - mix타입일때 border color
/// @param {Number} $isBorderWidth - border width
/// @param {Number} $isSubThemeColor - mix타입일때 background color
@mixin drawingCircle($isType, $isMainThemeColor, $isBorderWidth: 0, $isSubThemeColor: none) {
  $isBorderWidth: insertUnit($isBorderWidth);
  display: inline-block;
  border-radius: 50%;
  @if ($isType== "stroke") {
    border: $isBorderWidth solid $isMainThemeColor;
  } @else if ($isType== "fill") {
    background-color: $isMainThemeColor;
  } @else {
    border: $isBorderWidth solid $isMainThemeColor;
    background-color: $isSubThemeColor;
  }
}
//도형 - 삼각형
/// @param {Number} $isSize - 삼각형의 크기
/// @param {String} $isMainThemeColor - background color
/// @param {String} $isDirection - 방향
@mixin drawingTriangle($isSize, $isMainThemeColor, $isDirection: top) {
  $isSize: insertUnit($isSize);
  display: inline-block;
  width: 0;
  height: 0;
  @if ($isDirection == top) {
    border-left: calc($isSize / 2) solid transparent;
    border-right: calc($isSize / 2) solid transparent;
    border-bottom: $isSize solid $isMainThemeColor;
  } @else if ($isDirection == bottom) {
    border-left: calc($isSize / 2) solid transparent;
    border-right: calc($isSize / 2) solid transparent;
    border-top: $isSize solid $isMainThemeColor;
  } @else if ($isDirection == left) {
    border-top: calc($isSize / 2) solid transparent;
    border-right: $isSize solid $isMainThemeColor;
    border-bottom: calc($isSize / 2) solid transparent;
  } @else if ($isDirection == right) {
    border-top: calc($isSize / 2) solid transparent;
    border-left: $isSize solid $isMainThemeColor;
    border-bottom: calc($isSize / 2) solid transparent;
  } @else if ($isDirection == topleft) {
    border-top: $isSize solid $isMainThemeColor;
    border-right: $isSize solid transparent;
  } @else if ($isDirection == topright) {
    border-top: $isSize solid $isMainThemeColor;
    border-left: $isSize solid transparent;
  } @else if ($isDirection == bottomleft) {
    border-bottom: $isSize solid $isMainThemeColor;
    border-right: $isSize solid transparent;
  } @else if ($isDirection == bottomright) {
    border-bottom: $isSize solid $isMainThemeColor;
    border-left: $isSize solid transparent;
  }
}
//도형 - 삼각형 사용지양 ( radius를 적용시킬 수 있지만 정확한 크기를 가늠할수 x )
/// @param {Number} $isSize - 삼각형의 크기
/// @param {String} $isMainThemeColor - background color
/// @param {String} $isDirection - 방향
/// @param {Number} $isRadius - radius 수치
@mixin drawingRoundTriangle($isSize, $isDirection: up, $isRadius: 0) {
  $isRadius: insertUnit($isRadius);
  display: inline-block;
  width: calc($isSize / 2);
  height: calc($isSize / 2);
  border-top-right-radius: $isRadius;
  // background-color: $isMainThemeColor; --> 배경 스타일을 클래스로 지정
  &:before,
  &:after {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: inherit;
    border-top-right-radius: $isRadius;
  }
  &:before {
    transform: rotate(-135deg) skewX(-45deg) scale(1.414, 0.707) translate(0, -50%);
  }
  &:after {
    transform: rotate(135deg) skewY(-45deg) scale(0.707, 1.414) translate(50%);
  }
  @if ($isDirection == top) {
    transform: rotate(60deg) skewX(-30deg) scale(1, 0.866);
    transform-origin: 30% 90%;
  } @else if ($isDirection == topCenter) {
    transform: rotate(60deg) skewX(-30deg) scale(1, 0.866) translateX(-50%);
    transform-origin: 30% 90%;
  } @else if ($isDirection == bottom) {
    transform: rotate(-120deg) skewX(-30deg) scale(1, 0.866);
    transform-origin: 30% 45%;
  } @else if ($isDirection == bottomCenter) {
    transform: rotate(-120deg) skewX(-30deg) scale(1, 0.866) translateX(-50%);
    transform-origin: 30% 45%;
  } @else if ($isDirection == left) {
    transform: rotate(90deg) skewX(-30deg) scale(1, 0.866) translateX(-50%);
    transform-origin: 45% 75%;
  } @else if ($isDirection == right) {
    transform: rotate(270deg) skewX(-30deg) scale(1, 0.866) translateX(50%);
    transform-origin: 45% 75%;
  }
}
//도형 - 쉐브론 화살표 < >
/// @param {Number} $isSize - 화살표 크기
/// @param {Number} $isBorderWidth - 화살표 굵기
/// @param {String} $isMainThemeColor - background color
/// @param {String} $isDirection - 방향
/// @param {Number} $isRadius - radius 수치
@mixin drawingChevron($isSize, $isBorderWidth, $isMainThemeColor, $isDirection: top, $isRadius: 0) {
  $isSize: insertUnit($isSize);
  $isBorderWidth: insertUnit($isBorderWidth);
  $isRadius: insertUnit($isRadius);
  display: inline-block;
  position: relative;
  width: $isSize;
  height: $isSize;
  &::before,
  &::after {
    @include createPseudoElement;
    width: $isSize;
    height: $isBorderWidth;
    position: absolute;
    border-radius: $isRadius;
    background-color: $isMainThemeColor;
  }
  &::before {
    top: 0;
    left: 0;
  }
  &::after {
    top: calc($width / 2 - $height / 2);
    left: calc($width / 2 - $height / 2);
    transform: rotate(90deg);
  }
  @if ($isDirection== "top") {
    transform: rotate(315deg);
  } @else if ($isDirection== "bottom") {
    transform: rotate(135deg);
  } @else if ($isDirection== "left") {
    transform: rotate(225deg);
  } @else if ($isDirection== "right") {
    transform: rotate(45deg);
  }
}
//도형 - 체크형태
/// @param {Number} $isSize - 체크 크기
/// @param {Number} $isBorderWidth - 체크 굵기
/// @param {String} $isMainThemeColor - background color
/// @param {Number} $isRadius - radius 수치
@mixin drawingCheck($isSize, $isBorderWidth, $isMainThemeColor, $isRadius: 0) {
  $isSize: insertUnit($isSize);
  $isBorderWidth: insertUnit($isBorderWidth);
  $isRadius: insertUnit($isRadius);
  display: inline-block;
  position: relative;
  width: $isSize;
  height: $isSize;
  transform: rotate(45deg);
  &::before,
  &::after {
    @include createPseudoElement;
    height: $isBorderWidth;
    position: absolute;
    border-radius: $isRadius;
    background-color: $isMainThemeColor;
  }
  &::before {
    width: calc($isSize / 1.5);
    bottom: 0;
    right: 0;
  }
  &::after {
    width: $isSize;
    bottom: calc($isSize / 2 - $isBorderWidth / 2);
    left: calc($isSize / 2 - $isBorderWidth / 2);
    transform: rotate(90deg);
  }
}
//도형 - 사각형
/// @param {Number} $isWidth - 사각형 너비
/// @param {Number} $isHeight - 사각형 높이
/// @param {String} $isType - stroke & fill & mix
/// @param {String} $isMainThemeColor - mix 타입일때 background color
/// @param {Number} $isBorderWidth - 화살표 굵기
/// @param {String} $isSubThemeColor - mix 타입일때 border color
/// @param {Number} $isRadius - radius 수치
@mixin drawingRectangle($isType, $isMainThemeColor, $isBorderWidth: none, $isSubThemeColor: none, $isRadius: 0) {
  $isBorderWidth: insertUnit($isBorderWidth);
  $isRadius: insertUnit($isRadius);
  display: inline-block;
  border-radius: $isRadius;
  @if ($isType== "stroke") {
    border: $isBorderWidth solid $isMainThemeColor;
  } @else if ($isType== "fill") {
    background-color: $isMainThemeColor;
  } @else {
    border: $isBorderWidth solid $isMainThemeColor;
    background-color: $isSubThemeColor;
  }
}
/// @param {String} $isDirection - 방향
@mixin createToggleWrapper($isDirection: left) {
  $width: 40px;
  $height: 24px;
  $margin: 8px;
  $radius: 30px;
  $bgColor: $gray100;
  $checkBgColor: $primary500;
  @if ($isDirection == left) {
    & + label::before {
      width: $width;
      height: $height;
      margin-right: $margin;
      border-radius: $radius;
      background-color: $bgColor;
      vertical-align: middle;
    }
    &:checked + label::before {
      background-color: $checkBgColor;
    }
  } @else if($isDirection == right) {
    & + label::after {
      width: $width;
      height: $height;
      margin-left: $margin;
      border-radius: $radius;
      background-color: $bgColor;
      vertical-align: middle;
    }
    &:checked + label::after {
      background-color: $checkBgColor;
    }
  }
}
/// @param {String} $isDirection - 방향
@mixin createToggleCircle($isDirection: left) {
  $width: 18px;
  $height: 18px;
  $top: 2px;
  $left: 3px;
  $right: 19px;
  $radius: 50%;
  $bgColor: $white100;
  @if ($isDirection == left) {
    & + label::after {
      width: $width;
      height: $height;
      position: absolute;
      top: $top;
      left: $left;
      border-radius: $radius;
      background-color: $bgColor;
    }
    &:checked + label::after {
      left: $right;
    }
  } @else if($isDirection == right) {
    & + label::before {
      width: $width;
      height: $height;
      position: absolute;
      top: $top;
      right: $right;
      border-radius: $radius;
      background-color: $bgColor;
    }
    &:checked + label::before {
      right: $left;
    }
  }
}
@mixin dimmed($isColor) {
  display: none;
  @include setPosition(fixed, left, 0, top, 0);
  background-color: $isColor;
  width: 100vw;
  height: 100vh;
  z-index: 10;
  &.active {
    display: block;
  }
}

//  미디어 쿼리
/// @param {Number} $isPoint - breakpoints px 1920, 720, 480 . . . {1920, "pc"}
/// @param {String} $isBreakPointStart - 반응형 중단점 기준 {min, max}
@mixin respond($isPoint, $isBreakPointStart: max) {
  $isPoint: insertUnit($isPoint);
  @media all and (#{$isBreakPointStart}-width: $isPoint) {
    @content;
  }
}
